# -*- coding: utf-8 -*-
"""desafio_tentativa9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HdePzrZ4qwa7znkWDBnU7XpwGYCS4EVH
"""

from abc import ABC
import pandas as pd
import numpy as np
import requests, zipfile, io, pymongo, json
from bson.json_util import loads

class CNPJdata(ABC):
  def __init__(self, url):
    self.url = url
    self.usar_colunas = ['SITUAÇÃO CADASTRAL',
                         'CNAE FISCAL PRINCIPAL', 
                         'DATA DE INÍCIO ATIVIDADE']
    self.colunas = ['CNPJ BÁSICO', 
                    'CNPJ ORDEM',
                    'CNPJ DV',
                    'IDENTIFICADOR MATRIZ/FILIAL',
                    'NOME FANTASIA',
                    'SITUAÇÃO CADASTRAL',
                    'DATA SITUAÇÃO CADASTRAL',
                    'MOTIVO SITUAÇÃO CADASTRAL',
                    'NOME DA CIDADE NO EXTERIOR',
                    'PAIS',
                    'DATA DE INÍCIO ATIVIDADE',
                    'CNAE FISCAL PRINCIPAL',
                    'CNAE FISCAL SECUNDÁRIA',
                    'TIPO DE LOGRADOURO',
                    'LOGRADOURO',
                    'NÚMERO',
                    'COMPLEMENTO',
                    'BAIRRO',
                    'CEP',
                    'UF',
                    'MUNICÍPIO',
                    'DDD 1',
                    'TELEFONE 1',
                    'DDD 2',
                    'TELEFONE 2',
                    'DDD DO FAX',
                    'FAX',
                    'CORREIO ELETRÔNICO',
                    'SITUAÇÃO ESPECIAL',
                    'DATA DA SITUAÇÃO ESPECIAL'
           ]

  def getData(self):
    self.r = requests.get(self.url)
    self.z = zipfile.ZipFile(io.BytesIO(self.r.content))
    with self.z.open(*self.z.namelist()) as f:
      self.dados = pd.read_csv(f, names=self.colunas, encoding="ISO-8859-1", engine="python", sep=";", usecols=self.usar_colunas)
      return self.dados

  def generateExcel(self, data):
    self.data = data
    self.data.to_excel('/content/resultado.xlsx')  

  def getYear(self, elemento):
    return str(self.elemento)[:4]

  def getCNAE(self, elemento):
    return str(self.elemento)[:3]        
  
class Situacao(CNPJdata):
  def get_df(self, dados):
    self.dados = dados
    self.dados['SITUAÇÃO CADASTRAL'] = self.dados['SITUAÇÃO CADASTRAL'].apply(self.changeSituationName)
    self.situacao = self.dados['SITUAÇÃO CADASTRAL']
    self.situacao = self.situacao.groupby(dados['SITUAÇÃO CADASTRAL'])
    self.situacao = self.situacao.count()
    self.situacao = pd.DataFrame(self.situacao)
    self.situacao = self.situacao.rename(columns={'SITUAÇÃO CADASTRAL':'SOMA'})

    self.percent = []
    for row, index in self.situacao.iterrows():
      porcentagem = index['SOMA'] / len(self.dados) * 100
      porcentagem = f'{porcentagem:.2f}'
      self.percent.append(porcentagem)

    self.situacao['%'] = np.asarray(self.percent)    
    return self.situacao
  
  

  def changeSituationName(self, elemento):
    if elemento == 1:
      return 'NULAS'
    elif elemento == 2:
      return 'ATIVAS'
    elif elemento == 3:
      return 'SUSPENSAS'
    elif elemento == 4:
      return 'INAPTAS'
    elif elemento == 8:
      return 'BAIXADAS' 
    else:
      return elemento

  def addDataBase(self, dados):
    self.dados = dados
    self.dados = self.dados.to_dict()
    self.dados = json.dumps(self.dados)
    self.client = pymongo.MongoClient("mongodb://brunomaka:bdo159357@cluster0-shard-00-00.fg9r6.mongodb.net:27017,cluster0-shard-00-01.fg9r6.mongodb.net:27017,cluster0-shard-00-02.fg9r6.mongodb.net:27017/myFirstDatabase?ssl=true&replicaSet=atlas-f9pulg-shard-0&authSource=admin&retryWrites=true&w=majority")
    self.db = self.client.get_database('CNPJ')
    self.db.situacao.insert_one(loads(self.dados))
    #db.restaurante_por_ano.insert_one(loads(por_ano_json))

class Restaurantes(CNPJdata):
  def get_df(self, dados):
    self.restaurantes = dados    
    self.restaurantes = self.restaurantes[self.restaurantes['CNAE FISCAL PRINCIPAL'].apply(self.getCNAE) == '561']
    self.restaurantes = self.restaurantes[['DATA DE INÍCIO ATIVIDADE','CNAE FISCAL PRINCIPAL']]
    self.restaurantes['DATA DE INÍCIO ATIVIDADE'] = self.restaurantes['DATA DE INÍCIO ATIVIDADE'].apply(self.getYear)
    self.restaurantes = self.restaurantes.rename(columns={'DATA DE INÍCIO ATIVIDADE':'ANO'})

    self.por_ano = self.restaurantes.value_counts('ANO')
    self.por_ano = pd.DataFrame(self.por_ano)
    self.por_ano = self.por_ano.sort_values(by='ANO')
    self.por_ano = self.por_ano.rename(columns={0:'RESTAURANTES'})
    #self.por_ano.to_excel('/content/restaurantes_por_ano.xlsx')
    return self.por_ano
  
  def addDataBase(self, dados):
    self.dados = dados
    self.dados = self.dados.to_dict()
    self.dados = json.dumps(self.dados)
    self.client = pymongo.MongoClient("mongodb://brunomaka:bdo159357@cluster0-shard-00-00.fg9r6.mongodb.net:27017,cluster0-shard-00-01.fg9r6.mongodb.net:27017,cluster0-shard-00-02.fg9r6.mongodb.net:27017/myFirstDatabase?ssl=true&replicaSet=atlas-f9pulg-shard-0&authSource=admin&retryWrites=true&w=majority")
    self.db = self.client.get_database('CNPJ')    
    self.db.restaurante_por_ano.insert_one(loads(self.dados))
  
  def getYear(self, elemento):
    return str(elemento)[:4]

  def getCNAE(self, elemento):
    return str(elemento)[:3]

# CRIAR A INSTANCIA DE QUALQUER LINK DE EMPRESAS ESTABELECIMENTO
situacao = Situacao('http://200.152.38.155/CNPJ/K3241.K03200Y9.D10710.ESTABELE.zip')
restaurantes = Restaurantes('http://200.152.38.155/CNPJ/K3241.K03200Y9.D10710.ESTABELE.zip')

# CRIAR OS DADOS
dados = situacao.getData()

# GERAR EXCEL DA SITUACAÇÃO CADASTRAL
situacao.generateExcel(situacao.get_df(dados))

# GERAR EXCEL DA QUANTIDADE DE RESTAURANTES ABERTOS POR ANO
restaurantes.generateExcel(restaurantes.get_df(dados))

# ADICIONAR OS DADOS DAS SITUAÇÃO CADASTRAL PARA O MOGODB
situacao.addDataBase(situacao.get_df(dados))

# ADICIONAR OS DADOS DOS RESTUARANTEDS ABERTOS POR ANO NO MOGODB
restaurantes.addDataBase(restaurantes.get_df(dados))

