# -*- coding: utf-8 -*-
"""desafio_tentativa8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wkNh_CXT1ufGsbJzYAW-ZEtKoV-W2b_C
"""

import pandas as pd
import numpy as np
import requests, zipfile, io, pymongo, json
from bson.json_util import loads

#DEFINIR OS NOMES DAS COLUNAS

colunas = ['CNPJ BÁSICO', 
           'CNPJ ORDEM',
           'CNPJ DV',
           'IDENTIFICADOR MATRIZ/FILIAL',
           'NOME FANTASIA',
           'SITUAÇÃO CADASTRAL',
           'DATA SITUAÇÃO CADASTRAL',
           'MOTIVO SITUAÇÃO CADASTRAL',
           'NOME DA CIDADE NO EXTERIOR',
           'PAIS',
           'DATA DE INÍCIO ATIVIDADE',
           'CNAE FISCAL PRINCIPAL',
           'CNAE FISCAL SECUNDÁRIA',
           'TIPO DE LOGRADOURO',
           'LOGRADOURO',
           'NÚMERO',
           'COMPLEMENTO',
           'BAIRRO',
           'CEP',
           'UF',
           'MUNICÍPIO',
           'DDD 1',
           'TELEFONE 1',
           'DDD 2',
           'TELEFONE 2',
           'DDD DO FAX',
           'FAX',
           'CORREIO ELETRÔNICO',
           'SITUAÇÃO ESPECIAL',
           'DATA DA SITUAÇÃO ESPECIAL'
           ]

url = 'http://200.152.38.155/CNPJ/K3241.K03200Y9.D10710.ESTABELE.zip'
usar_colunas = ['SITUAÇÃO CADASTRAL','CNAE FISCAL PRINCIPAL', 'DATA DE INÍCIO ATIVIDADE']

# BAIXAR ARQUIVO DE ACORDO COM A URL
r = requests.get(url)
z = zipfile.ZipFile(io.BytesIO(r.content))

# ABRIR ARQUIVO E GEDAR UM DATASET
with z.open(*z.namelist()) as f:
    dados = pd.read_csv(f, names=colunas, encoding="ISO-8859-1", engine="python", sep=";", usecols=usar_colunas)

# ORGANIZAR OS DADOS GERADOS, COLOCAR EM DICIONÁRIOS E TRANSFORMÁ-LOS EM JSON

## ORGANIZAR A SITUACAO CADASTRAL 1

### FUNÇÃO PARA ALTERAR O NÚMERO PARA O NOME DA SITUAÇÃO 

def changeSituationName(elemento):
  if elemento == 1:
    return 'NULA'
  elif elemento == 2:
    return 'ATIVA'
  elif elemento == 3:
    return 'SUSPENSA'
  elif elemento == 4:
    return 'INAPTA'
  elif elemento == 8:
    return 'BAIXADA'

dados['SITUAÇÃO CADASTRAL'] = dados['SITUAÇÃO CADASTRAL'].apply(changeSituationName)

# ORGANIZAR A SITUACAO CADASTRAL 2

situacao = dados['SITUAÇÃO CADASTRAL']
situacao = situacao.groupby(dados['SITUAÇÃO CADASTRAL'])
situacao = situacao.count()
situacao = pd.DataFrame(situacao)
situacao = situacao.rename(columns={'SITUAÇÃO CADASTRAL':'SOMA'})

percent = []
for row, index in situacao.iterrows():
  porcentagem = index['SOMA'] / len(dados) * 100
  porcentagem = f'{porcentagem:.2f}'
  percent.append(porcentagem)

situacao['%'] = np.asarray(percent)

situacao_dict = situacao.to_dict()
situacao_json = json.dumps(situacao_dict)

# ORGANIZAR A CNAE E DATA DE INICIO DA ATIVIDADE

## FUNÇÕES PARA ENCONTRAR ANO E CNAE

def getYear(elemento):
  return str(elemento)[:4]

def getCNAE(elemento):
  return str(elemento)[:3]

# PEGAR TODOS OS RESTAURANTES E APENAS OS ANOS DE INICIO DE ATIVIDADE
restaurantes = dados[dados['CNAE FISCAL PRINCIPAL'].apply(getCNAE) == '561']
restaurantes = restaurantes[['DATA DE INÍCIO ATIVIDADE','CNAE FISCAL PRINCIPAL']]
restaurantes['DATA DE INÍCIO ATIVIDADE'] = restaurantes['DATA DE INÍCIO ATIVIDADE'].apply(getYear)
restaurantes = restaurantes.rename(columns={'DATA DE INÍCIO ATIVIDADE':'ANO'})

# AGRUPAR TODOS OS ANOS E SOMAR E QUANTIDADE DE RESTAURANTES EM CADA ANO
por_ano = restaurantes.value_counts('ANO')
por_ano = pd.DataFrame(por_ano)
por_ano = por_ano.sort_values(by='ANO')
por_ano = por_ano.rename(columns={0:'RESTAURANTES'})

por_ano_dict = por_ano.to_dict()
por_ano_json = json.dumps(por_ano_dict)

# SALVAR DADOS NO MONGODB ATLAS

## CLUSTER, DATABASE E COLLECTIONS CRIADAS VIA MONGODB COMPASS

client = pymongo.MongoClient("mongodb://brunomaka:bdo159357@cluster0-shard-00-00.fg9r6.mongodb.net:27017,cluster0-shard-00-01.fg9r6.mongodb.net:27017,cluster0-shard-00-02.fg9r6.mongodb.net:27017/myFirstDatabase?ssl=true&replicaSet=atlas-f9pulg-shard-0&authSource=admin&retryWrites=true&w=majority")

db = client.get_database('CNPJ')

db.situacao.insert_one(loads(situacao_json))

db.restaurante_por_ano.insert_one(loads(por_ano_json))

# EXPORTAR DADOS DO PARA EXCEL, QUE RESPONDEM OS ITENS 4A, 4B E 5 DO DESAFIO

situacao.to_excel('/content/situacao-das-empresas.xlsx')

por_ano.to_excel('/content/restaurantes_por_ano.xlsx')